searchData={"items":[{"type":"module","title":"Topo","doc":"A Geometry library for Elixir that calculates relationships between two\ngeometries.  Geometries can be of any of the following types:\n\n* Point\n* LineString\n* Polygon\n* MultiPoint\n* MultiLineString\n* MultiPolygon\n\nEach of these functions can be passed any two Geometries in either a Map with a\n`:type` and `:coordinates` keys or as a struct generated via the Geo library\n(https://github.com/bryanjos/geo). Coordinates are represented as atoms `{x, y}`\nand multiple coordinates as Lists.\n\n```elixir\na = %{type: \"Polygon\", coordinates: [[{2, 2}, {20, 2}, {11, 11}, {2, 2}]]}\nb = %Geo.Polygon{coordinates: [[{2, 2}, {20, 2}, {11, 11}, {2, 2}]]}\n\nTopo.equals? a, b # => true\n```\n\nInstead of a Point geometry, just a single coordinate can be used.\n\n```elixir\na = %{type: \"Polygon\", coordinates: [[{2, 2}, {20, 2}, {11, 11}, {2, 2}]]}\n\nTopo.intersects? a, {4, 6} # => true\n```\n\nThe `Topo` library's functions will automatically attempt to \"clean\" geometries\npassed to them:\n\n* Linear Rings (including Polygons) will be reordered to a counter-clockwise\ndirection.\n* Polygon's Linear Rings will automatically be closed if the first point is not\nrepeated as the last point.\n* Points that are equal or collinear with surrounding points are removed from\nLineStrings or Polygons.","ref":"Topo.html"},{"type":"function","title":"Topo.contains?/2","doc":"Returns `true` if all points of geometry **B** lie within **A**.\n\nThere are a few non-obvious special cases that are worth mentioning:\n\n  - A Polygon does not contain its own boundary.  Specifically a LineString that\n  is the exact same as a Polygon's exterior Linear ring is not contained within a\n  that Polygon.\n\n  ```elixir\n  a = %Geo.Polygon{coordinates: [[{2, 2}, {20, 2}, {11, 11}, {2, 2}]]}\n  b = %Geo.LineString{coordinates: [{2, 2}, {20, 2}, {11, 11}, {2, 2}]}\n\n  Topo.contains? a, b # => false\n  Topo.intersects? a, b  # => true\n  ```\n\n  - A LineString does not contain it's own first and last point (unless those\n  points are the same, as in a LinearRing)\n\n  ```elixir\n  a = %Geo.LineString{coordinates: [{1, 3}, {2, -1}, {0, -1}]}\n  b = %Geo.LineString{coordinates: [{1, 3}, {2, -1}, {0, -1}, {1, 3}]}\n\n  Topo.contains? a, {1, 3} # => false\n  Topo.intersects? a, {1, 3} # => true\n  Topo.contains? b, {1, 3} # => true\n  ```","ref":"Topo.html#contains?/2"},{"type":"function","title":"Examples - Topo.contains?/2","doc":"iex> Topo.contains?(\n    ...>   %{type: \"Polygon\", coordinates: [[{20, 20}, {20, 180}, {220, 180}, {220, 20}, {20, 20}]]},\n    ...>   %{type: \"Polygon\", coordinates: [[{160, 60}, {20, 20}, {100, 140}, {160, 60}]]}\n    ...> )\n    true\n\n    iex> Topo.contains?(\n    ...>   %{type: \"Polygon\", coordinates: [[{160, 60}, {20, 20}, {100, 140}, {160, 60}]]},\n    ...>   %{type: \"Polygon\", coordinates: [[{20, 20}, {20, 180}, {220, 180}, {220, 20}, {20, 20}]]}\n    ...> )\n    false","ref":"Topo.html#contains?/2-examples"},{"type":"function","title":"Topo.disjoint?/2","doc":"Returns `true` if geometries **A** and **B** do not have any points in\ncommon.","ref":"Topo.html#disjoint?/2"},{"type":"function","title":"Examples - Topo.disjoint?/2","doc":"iex> Topo.disjoint?({1, -3}, %{type: \"MultiPoint\", coordinates: [{70, 35}, {100, 80}]})\n    true\n\n    iex> Topo.disjoint?(\n    ...>   %{type: \"Polygon\", coordinates: [\n    ...>     [{60, 120}, {60, 40}, {160, 40}, {160, 120}, {60, 120}],\n    ...>     [{140, 100}, {80, 100}, {80, 60}, {140, 60}, {140, 100}]]},\n    ...>   %Geo.MultiPoint{coordinates: [{70, 35}, {100, 80}]}\n    ...> )\n    true","ref":"Topo.html#disjoint?/2-examples"},{"type":"function","title":"Topo.equals?/2","doc":"Geometries **A** and **B** are equivalent and cover the exact\nsame set of points.  By definition, **A** and **B** are equal if **A** contains\n**B** and **B** contains **A**.  Equality does not necessarily mean that the\ngeometries are of the same type.  A Point **A** is equal to a MultiPoint that\ncontains only the same Point **A**.","ref":"Topo.html#equals?/2"},{"type":"function","title":"Examples - Topo.equals?/2","doc":"iex> Topo.equals?(\n    ...>   %{type: \"Point\", coordinates: {2, -3}},\n    ...>   %{type: \"MultiPoint\", coordinates: [{2, -3}]}\n    ...> )\n    true\n\n    iex> Topo.equals?(\n    ...>   %{type: \"Polygon\", coordinates: [[{160, 60}, {20, 20}, {100, 140}, {160, 60}]]},\n    ...>   %{type: \"Polygon\", coordinates: [[{20, 20}, {20, 180}, {220, 180}, {220, 20}, {20, 20}]]}\n    ...> )\n    false","ref":"Topo.html#equals?/2-examples"},{"type":"function","title":"Topo.intersects?/2","doc":"Returns `true` if geometries **A** and **B** share at least one point in\ncommon.","ref":"Topo.html#intersects?/2"},{"type":"function","title":"Examples - Topo.intersects?/2","doc":"iex> Topo.intersects?(\n    ...>   %{type: \"Polygon\", coordinates: [[{2, 2}, {20, 2}, {11, 11}, {2, 2}]]},\n    ...>   %{type: \"LineString\", coordinates: [{11, 10}, {4, 2.5}, {16, 2.5}, {11, 10}]}\n    ...> )\n    true\n\n    iex> Topo.intersects?(\n    ...>   %{type: \"Polygon\", coordinates: [\n    ...>     [{60, 120}, {60, 40}, {160, 40}, {160, 120}, {60, 120}],\n    ...>     [{140, 100}, {80, 100}, {80, 60}, {140, 60}, {140, 100}]]},\n    ...>   %{type: \"MultiPoint\", coordinates: [{70, 35}, {100, 80}]}\n    ...> )\n    false","ref":"Topo.html#intersects?/2-examples"},{"type":"function","title":"Topo.within?/2","doc":"This is the direct converse of `contains?`.  All points of\ngeometry **A** lie within geometry **B**.","ref":"Topo.html#within?/2"},{"type":"function","title":"Examples - Topo.within?/2","doc":"iex> Topo.within?(\n    ...>   %{type: \"Polygon\", coordinates: [[{20, 20}, {20, 180}, {220, 180}, {220, 20}, {20, 20}]]},\n    ...>   %{type: \"Polygon\", coordinates: [[{160, 60}, {20, 20}, {100, 140}, {160, 60}]]}\n    ...> )\n    false\n\n    iex> Topo.within?(\n    ...>   %{type: \"Polygon\", coordinates: [[{160, 60}, {20, 20}, {100, 140}, {160, 60}]]},\n    ...>   %{type: \"Polygon\", coordinates: [[{20, 20}, {20, 180}, {220, 180}, {220, 20}, {20, 20}]]}\n    ...> )\n    true","ref":"Topo.html#within?/2-examples"},{"type":"type","title":"Topo.geometry/0","doc":"","ref":"Topo.html#t:geometry/0"}],"content_type":"text/markdown","producer":{"name":"ex_doc","version":[48,46,51,50,46,50]}}